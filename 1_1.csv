text,question,answer
SQL Server распараллеливает соединение вложенных циклов (Nested Loops Join)  распределяя в случайном порядке строки внешней таблицы по потокам вложенных циклов. В данном случае  речь идёт о строках  которые поступают первыми  и мы их видим вверху  на графическом плане запроса. Например  если на входе соединения вложенных циклов имеется два потока  каждый поток получит приблизительно половину строк. Потоки проходятся по строкам внутренней таблицы соединения (то есть  по строкам  поданным во вторую очередь  мы их видим ниже в плане запроса)  точно по такому же алгоритму  как это было бы реализовано в сценарии с последовательной обработкой строк. Таким образом  для каждой обрабатываемой потоком строки внешней таблицы  поток обеспечивает соединение своей внутренней таблицы  используя эту строку в качестве источника коррелированных параметров. Это позволяет потокам работать независимо друг от друга. При этом для внутренней таблицы соединения вложенных циклов SQL Server не добавляет операторы параллелизма и работу с ней не распараллеливает. Давайте рассмотрим простой пример. Чтобы вынудить оптимизатор выбрать параллельный план  создадим таблицу с большим числом строк. Если Вы решите проверить эти примеры у себя  учтите  что заполнение таблицы тестовыми данными может занять несколько минут. Сразу заметим  что в плане виден только один оператор Exchange (оператор  указывающий на параллелизм  и обозначенный в этом плане  как Parallelism(Gather Streams)). Так как оператор параллелизма находится в корне плана запроса  все операторы в этом плане (соединение вложенных циклов  просмотр таблицы и поиск по кластерному индексу) будут выполняться в нескольких параллельных потоках. Индекс на T1 не был создан сознательно. Отсутствие индекса приводит к тому  что для выборки строк будет выполнен просмотр всей таблицы и потом к выборке будет применён предикат с оценкой «T1.a < 100». Поскольку в T1 миллион строк  просмотр таблицы будет дорогостоящей операцией  и поэтому оптимизатор предпочтёт использование распараллеленного просмотра T1. Заметьте  что просмотр таблицы T1 не располагается первым под оператором параллелизма. В плане запроса мы его видим на внешней стороне оператора соединения вложенных циклов  который как раз и расположен ниже оператора параллелизма. Однако  поскольку просмотр выполняется для внешней стороны соединения и потому что само соединение расположилось в плане запроса ниже места начала параллелизма (то есть  места сбора или перераспределения)  для таблицы T1 будет применён распараллеленный просмотр. Если вспомнить предыдущую статью  распараллеленный просмотр распределяет страницы между потоками динамически. Таким образом  строки при просмотре таблицы T1 также будут распределены между несколькими потоками. Впрочем  неизвестно  какие строки  в какие потоки будут распределены. Так как этот запрос выполнялся со степенью параллелизма – DOP равным 2  на текстовом плане исполнения запроса мы видим  что в колонке «Executes» для просмотра таблицы и соединения (которые попали в один и тот же поток) стоит значение 2. Кроме того  просмотр с соединением возвращают в общей сложности 100 строк  хотя мы не можем сделать из этого плана вывод  сколько строк возвратил каждый из двух потоков (эту информацию можно получить  используя статистику в виде XML  о будет сказано ниже). Далее  соединение обращается к внутренней таблице (в этом случае используется поиск по индексу T2)  поиск выполняется для каждой из 100 строк  полученных из внешней таблицы. Тут мы имеем дело с маленькой хитростью в понимании представленного выше сценария. Мы видим  что у каждого из двух потоков свой экземпляр поиска по индексу. Также  в плане показано  что поиск по индексу расположен ниже оператора соединения  да и само соединение мы видим ниже оператора параллелизма  но тут не используется распараллеленный просмотр. Вместо просмотра оптимизатор указывает использовать два экземпляра поиска по индексу внутренней таблицы соединения. Эти экземпляры поиска выполняются независимо друг от друга  используя два разных набора строк внешней таблицы и разные коррелированные параметры. Как и в последовательном плане  мы видим 100 исполнений просмотров индекса: по одному для каждой строки внешней таблицы соединения. Независимо от комплектации соединения вложенных циклов со стороны внутренней таблицы  в плане исполнения   запроса мы всегда будем видеть выбор последовательного сценария  точно такого же  как это было показано выше в нашем простом примере,что обеспечивает поток для каждой внешней таблицы,соединение своей внутренней таблицы
Привет  Хабр! Меня зовут Дмитрий Комиссаров  я член совета директоров и основатель МойОфис. За годы работы в ИТ я не раз наблюдал  как перед разработчиками встает дилемма: задействовать СПО или написать весь код самостоятельно «с нуля»? На этот вопрос нет универсального ответа. Кажущаяся доступность СПО вселяет излишний оптимизм в ИТ-специалистов  но как показывает практика  такой подход может привести к многократному росту непрогнозируемых рисков. А ошибка в выборе  например  корпоративной почты и вовсе способна привести к остановке бизнес-процессов всего предприятия  где было внедрено то или иное решение. Сегодня на D-Russia.ru вышла моя новая статья. В ней я рассуждаю о том  какой вариант предпочтительнее для современной крупной организации — задействовать в создании продукта проприетарные технологии  либо полагаться на СПО. И детально разбираю опасности  которые возникают при использовании в российских компаниях продуктов со свободными лицензиями. Надеюсь  Хабрасообществу также будет интересно почитать об этом. Полный текст статьи доступен под катом. Существует два типа почтовых решений — классические системы  то есть разворачиваемые на собственной серверной инфраструктуре (on-premise) и облачные («рожденные для облака» или cloud-born)  которые разработаны крупными почтовыми SaaS-провайдерами. Первые можно тиражировать  но они имеют пределы масштабирования  которые измеряются несколькими тысячами пользователей. Вторые же существуют в единственном экземпляре  полностью подконтрольны провайдеру и могут обслуживать десятки  даже сотни миллионов пользователей. Приложения Cloud-born часто называют Cloud Native. Такие решения строятся как набор микросервисов  слабо связанных между собой и упакованных в контейнеры. Контейнеризированные приложения автоматически управляются облачными платформами  а сама микросервисная архитектура может масштабироваться до уровней  которые сложно достичь при обычном подходе. Cloud Native решения в сравнении с продуктами монолитной архитектуры более гибкие и стабильные. Показатели надежности продукта  построенного на принципе Cloud Native  позволяют обеспечить отсутствие времени видимого простоя – то есть  говоря на языке обычного пользователя  софт не будет «зависать». Можно считать  что решение соответствует принципу Cloud Native только в том случае  если оно способно к автоматическому мониторингу  самовосстановлению и масштабируемости. Любой Enterprise-продукт требует длительного проектирования  разработки и усилий большой высококвалифицированной команды. Применяя только СПО  создавать решения такого класса гораздо сложнее. Нужно собрать команду  кто-то должен это финансировать  люди где-то должны работать: либо full-time на этом проекте  в режиме создания собственного СПО  либо рart-time при его создании. Сразу возникает вопрос – а насколько быстро такие команды придут к результату и насколько ответственно они будут подходить к своей работе? Если потратить немного времени и разобраться в вопросе  то станет понятно  что применимость on-premise опенсорсных почтовых решений сильно ограничена одним-двумя десятками тысяч пользователей. И виной тому сразу несколько причин — технологические особенности программных продуктов  юридические и лицензионные ограничения и слабо прогнозируемые риски.,к чему способна привести ошибка в выборе корпоративной почты,остановке бизнес-процессов всего предприятия
Статья Social media usage in the United States - Statistics & Facts опубликована исследовательским департаментом Statista  23 февраля 2022. При переводе статьи мы проверили и обновили некоторые цифры по данным той же Statista.com и дополнили типологией социальных медиа. В США один из самых высоких уровней проникновения социальных сетей в мире. В 2021 году более 295 миллионов американцев использовали социальные сети  чтобы публиковать фотографии  лайкать и комментировать чужой контент или отправлять личные сообщения. Поскольку более 70 процентов населения США имеют учетную запись в социальных сетях  эти платформы и услуги стали одними из самых популярных онлайн-мероприятий за последние десятилетия. К 2025 году число пользователей социальных сетей в США  по прогнозам  увеличится примерно до 313 миллионов человек. Социальные медиа в основном используются для развлечения  общения  освещения новостей и деловых целей. (Social media гугл переводит как “социальные сети”  но мы оставляем понятие “медиа” и буквально в следующем абзаце будет пояснение по разнице терминов.) Из всех типов социальных медиа пользователи в США чаще всего посещают социальные сети (social networks)  платформы для обмена медиа (media-sharing platforms)  мессенджеры и микроблоги. Эти веб-сайты и приложения стали неотъемлемой частью повседневной жизни многих американских интернет-пользователей. В то время как среднее время ежедневного использования составляло менее часа до 2019 года  этот показатель увеличился в среднем до 65 минут в 2020 году во время пандемии коронавируса (COVID-19). Поскольку в марте 2020 года многие американцы начали самоизолироваться дома  социальные медиа и другие виды цифрового общения показали беспрецедентный всплеск использования по всей стране. Стоит отметить  что после скачка в 2020 существенных изменений уровня использования не было.,сколько времени ежедневного использования  до 2019 года состовляло использование веб-сайтов,менее часа
За последнюю неделю прошло очень много негативных событий. Мне кажется  этот кризис затронул все сферы и повлиял на каждого. Как при этом сохранить ясность ума и не делать поспешных решений? Расскажу в этом посте. Честно признаюсь  я сам провёл понедельник в состоянии стресса. Новости сыпались одна за другой. Все началось с санкций против банков. Один из моих банков оказался в этом списке. Что естественно повлияло на мое доверие к нему. Затем закрытие воздушного пространства многих европейских стран. То  что ещё неделю назад казалось обыденным делом  вдруг стало под запретом. ЦБ внепланово объявляет о повышении ключевой ставки до 20%. Хотя ещё недавно я говорил в своём видео  о ставке в 9.5%. И тут открывается рынок. И я своими глазами вижу как меняется курс доллара и падает рубль. Вроде бы все еще на прошлой неделе отразилось на нем и доллар был по 83. Но вот начались торги  и он упёрся в лимит в 90 рублей.,что закрыли во многих европейских стран,воздушное пространство
Сейчас корпорации научились доставлять изменения за 2–3 дня или даже день в день  тогда как раньше они делали это за год  месяц или неделю. Появление автоматизированного тестирования ПО и его использование в сочетании с ручным тестированием позволило менеджерам проектов придерживаться желаемых сроков доставки.  Своевременное тестирование ПО позволяет выявлять проблему и устранить ее до того  как функция попадет к пользователю. Тестирование ПО – одна из самых актуальных тем для обсуждения  в то время как архитектура ПО создается для удобства пользователей и является неотъемлемой частью его разработки.  Однако для максимизации использования автоматизированного тестирования необходимо соблюдать определенные правила. Сегодня в статье мы обсудим несколько практик  которым стоит следовать при внедрении автоматизации тестирования. Как только у вас появится команда тестировщиков  следующим шагом будет узнать  что мешает ей перейти к автоматизированному тестированию. В большинстве случаев это идея изучения нового языка программирования. Может ли команда выучить новый язык программирования и реализовать успешный проект по автоматизации тестирования? Все эти факторы – барьеры  которая команда должна преодолеть. Чтобы преодолеть такие страхи  команда должна начинать с малого. Основная идея в том  что ваша команда должна освоиться с инструментами и фреймворками  которые вы хотите использовать. Выбор инструмента автоматизации играет жизненно важную роль и это факт. Инструмент может быть либо бесплатным с открытым исходным кодом  либо платным коммерческим  но иметь лучший функционал и предлагать лучшую поддержку. Функции инструмента должны соответствовать требованиям к тестированию ПО. Он должен поддерживать несколько языков программирования  операционных систем и т.д. Прежде всего команда должна определить приоритеты и понять  какие тесты нужно автоматизировать. Не следует применять автоматизацию к тестам  просто потому что вы можете это сделать. Не нужно автоматизировать все. Многие тесты лучше проводить вручную. Автоматизация сложных и редко используемых тестов – это провал  и эта процедура не стоит усилий команды. Кроме того  создайте список браузеров и устройств  которые необходимы для вашего конкретного набора тестов.,за сколько корпорации научились доставлять изменения,за 2-3 дня
